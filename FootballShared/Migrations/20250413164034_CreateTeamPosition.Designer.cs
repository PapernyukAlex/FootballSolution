// <auto-generated />
using System;
using FootballShared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FootballShared.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250413164034_CreateTeamPosition")]
    partial class CreateTeamPosition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FootballShared.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon_link")
                        .HasAnnotation("Relational:JsonPropertyName", "flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("area_pkey");

                    b.ToTable("Area", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("FootballShared.Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconLink")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon_link")
                        .HasAnnotation("Relational:JsonPropertyName", "emblem");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("competition_pkey");

                    b.ToTable("Competition", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("FootballShared.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("away_team_id");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competition_id");

                    b.Property<int>("FullTimeAway")
                        .HasColumnType("integer")
                        .HasColumnName("full_time_away");

                    b.Property<int>("FullTimeHome")
                        .HasColumnType("integer")
                        .HasColumnName("full_time_home");

                    b.Property<int>("HalfTimeAway")
                        .HasColumnType("integer")
                        .HasColumnName("half_time_away");

                    b.Property<int>("HalfTimeHome")
                        .HasColumnType("integer")
                        .HasColumnName("half_time_home");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("home_team_id");

                    b.Property<DateTime>("MatchDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("match_datetime")
                        .HasAnnotation("Relational:JsonPropertyName", "utcDate");

                    b.Property<int>("Matchday")
                        .HasColumnType("integer")
                        .HasColumnName("matchday");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Winner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("winner");

                    b.HasKey("Id")
                        .HasName("matches_pkey");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_matches_area_id");

                    b.HasIndex("AwayTeamId")
                        .HasDatabaseName("ix_matches_away_team_id");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("ix_matches_competition_id");

                    b.HasIndex("HomeTeamId")
                        .HasDatabaseName("ix_matches_home_team_id");

                    b.ToTable("Match", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("FootballShared.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ContractEndDate")
                        .HasMaxLength(255)
                        .HasColumnType("date")
                        .HasColumnName("contract_end_date");

                    b.Property<DateOnly?>("ContractStartDate")
                        .HasColumnType("date")
                        .HasColumnName("contract_start_date");

                    b.Property<int>("CurrentTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("current_team_id");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nationality");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("position");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("person_pkey");

                    b.HasIndex("CurrentTeamId")
                        .HasDatabaseName("ix_person_current_team_id");

                    b.ToTable("Person", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });

                    b.HasAnnotation("Relational:JsonPropertyName", "squad");
                });

            modelBuilder.Entity("FootballShared.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<string>("ClubColors")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("club_colors");

                    b.Property<long>("Founded")
                        .HasColumnType("bigint")
                        .HasColumnName("founded");

                    b.Property<string>("IconLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon_link")
                        .HasAnnotation("Relational:JsonPropertyName", "crest");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("short_name");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stadium")
                        .HasAnnotation("Relational:JsonPropertyName", "venue");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("team_pkey");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_team_area_id");

                    b.ToTable("Team", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("FootballShared.Models.TeamPosition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competition_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int?>("Draw")
                        .HasColumnType("integer")
                        .HasColumnName("draw");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("form");

                    b.Property<int?>("GoalDifference")
                        .HasColumnType("integer")
                        .HasColumnName("goal_difference");

                    b.Property<int?>("GoalsAgainst")
                        .HasColumnType("integer")
                        .HasColumnName("goals_against");

                    b.Property<int?>("GoalsFor")
                        .HasColumnType("integer")
                        .HasColumnName("goals_for");

                    b.Property<int?>("Lost")
                        .HasColumnType("integer")
                        .HasColumnName("lost");

                    b.Property<int>("PlayedGames")
                        .HasColumnType("integer")
                        .HasColumnName("played_games");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int?>("Won")
                        .HasColumnType("integer")
                        .HasColumnName("won");

                    b.HasKey("CompetitionId", "Type", "TeamId")
                        .HasName("pk_team_positions");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("ix_team_positions_competition_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_positions_team_id");

                    b.ToTable("team_positions", "football");
                });

            modelBuilder.Entity("FootballShared.Models.TopScorerStatistics", b =>
                {
                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competition_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int>("Goals")
                        .HasColumnType("integer")
                        .HasColumnName("goals");

                    b.Property<int?>("Penalties")
                        .HasColumnType("integer")
                        .HasColumnName("penalties");

                    b.Property<int?>("PlayedMatches")
                        .HasColumnType("integer")
                        .HasColumnName("played_matches");

                    b.HasKey("CompetitionId", "PersonId", "TeamId")
                        .HasName("pk_top_scorer_statistics");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_top_scorer_statistics_person_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_top_scorer_statistics_team_id");

                    b.ToTable("top_scorer_statistics", "football");
                });

            modelBuilder.Entity("team_competition", b =>
                {
                    b.Property<int>("competition_id")
                        .HasColumnType("integer")
                        .HasColumnName("competition_id");

                    b.Property<int>("team_id")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("competition_id", "team_id")
                        .HasName("pk_team_competition");

                    b.HasIndex("team_id")
                        .HasDatabaseName("ix_team_competition_team_id");

                    b.ToTable("team_competition", "football");
                });

            modelBuilder.Entity("FootballShared.Models.Match", b =>
                {
                    b.HasOne("FootballShared.Models.Area", "Area")
                        .WithMany("Matches")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("matches_fk1");

                    b.HasOne("FootballShared.Models.Team", "AwayTeam")
                        .WithMany("MatchAwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("matches_fk7");

                    b.HasOne("FootballShared.Models.Competition", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("matches_fk2");

                    b.HasOne("FootballShared.Models.Team", "HomeTeam")
                        .WithMany("MatchHomeTeams")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("matches_fk6");

                    b.Navigation("Area");

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("FootballShared.Models.Person", b =>
                {
                    b.HasOne("FootballShared.Models.Team", "CurrentTeam")
                        .WithMany("People")
                        .HasForeignKey("CurrentTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("person_fk1");

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("FootballShared.Models.Team", b =>
                {
                    b.HasOne("FootballShared.Models.Area", "Area")
                        .WithMany("Teams")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("team_fk1");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("FootballShared.Models.TeamPosition", b =>
                {
                    b.HasOne("FootballShared.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_positions_competition_competition_id");

                    b.HasOne("FootballShared.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_positions_team_team_id");

                    b.Navigation("Competition");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballShared.Models.TopScorerStatistics", b =>
                {
                    b.HasOne("FootballShared.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_top_scorer_statistics_competition_competition_id");

                    b.HasOne("FootballShared.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_top_scorer_statistics_person_person_id");

                    b.HasOne("FootballShared.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_top_scorer_statistics_team_team_id");

                    b.Navigation("Competition");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("team_competition", b =>
                {
                    b.HasOne("FootballShared.Models.Competition", null)
                        .WithMany()
                        .HasForeignKey("competition_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_competition_competition_competition_id");

                    b.HasOne("FootballShared.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_competition_team_team_id");
                });

            modelBuilder.Entity("FootballShared.Models.Area", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootballShared.Models.Competition", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("FootballShared.Models.Team", b =>
                {
                    b.Navigation("MatchAwayTeams");

                    b.Navigation("MatchHomeTeams");

                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
